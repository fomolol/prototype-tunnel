/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';

export default function Model(props) {
  const group = useRef();
  const { nodes, materials, animations, scene } = useGLTF(
    '/3d/tunneltest2_objmove.gltf',
  );
  const { actions } = useAnimations(animations, group);

  console.log('actions', actions);

  // const { actions } = useAnimations(animations, scene);
  React.useLayoutEffect(() =>
    Object.values(nodes).forEach(
      node => (node.receiveShadow = node.castShadow = true),
    ),
  );
  React.useEffect(() => void (actions[0].play().paused = true), [actions]);
  useFrame((state, delta) => {
    const action = actions[0];
    // The offset is between 0 and 1, you can apply it to your models any way you like
    const offset = 1 - scroll.offset;
    action.time = THREE.MathUtils.damp(
      action.time,
      (action.getClip().duration / 2) * offset,
      100,
      delta,
    );
    state.camera.position.set(
      Math.sin(offset) * -10,
      Math.atan(offset * Math.PI * 2) * 5,
      Math.cos((offset * Math.PI) / 3) * -10,
    );
    state.camera.lookAt(0, 0, 0);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        name="Cylinder"
        geometry={nodes.Cylinder.geometry}
        // material={materials['Material.001']}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[1, 11.69, 1]}
      >
        <meshNormalMaterial />
      </mesh>
    </group>
  );
}

useGLTF.preload('/3d/tunneltest2_objmove.gltf');
